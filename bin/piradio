#!/bin/bash

#######################################################################
# Made by    : Ewoud Dronkert
# Licence    : GNU GPL v3
# Platform   : Raspberry Pi
# Requires   : Bash, mpd, mpc
# Location   : /usr/local/bin/
# Name       : piradio
# Version    : 1.0.0
# Date       : 2014-12-02
# Purpose    : Play radio streams via local mpd audio server
#              Use station abbreviations from user file .radiodb
# Parameters : <none> | <station> | list |
#              vol [ + | - | min | max | def | 0..100 ] |
#              on | off | help
# Exit     0 : success
#          1 : help displayed
#          2 : .radiodb local user file not found
#          3 : station abbreviation not recognised
#          4 : mpc executable not found
#######################################################################

# Variables
PLAYER=/usr/bin/mpc
DBNAME=.radiodb
DBFILE=/home/pi/$DBNAME
DEFVOL=85
ADJVOL=5

# Error codes
declare -i ERR_OK=0
declare -i ERR_HELP=1
declare -i ERR_DBNOTFOUND=2
declare -i ERR_IDNOTFOUND=3
declare -i ERR_APPNOTFOUND=4

# Copy/redirect output to stderr
function StdErr () {
	cat - 1>&2
}

if [ ! -x "$PLAYER" ]; then
	echo | StdErr
	echo "   Radio player not found: $PLAYER" | StdErr
	echo | StdErr
	exit $ERR_APPNOTFOUND
fi

# Help
if [[ "$1" == "help" || "$1" == "--help" || "$1" == "/help" || \
      "$1" == "-h" || "$1" == "/h" || \
      "$1" == "?" || "$1" == "-?" || "$1" == "/?" ]]; then
	echo | StdErr
	echo "   Usage:" | StdErr
	echo "   - Which station is on?  : radio" | StdErr
	echo "   - Tune to a station     : radio <station-id>" | StdErr
	echo "   - List all stations     : radio list" | StdErr
	echo "   - Show or adjust volume : radio vol [ + | - | min | max | def | 0..100 ]" | StdErr
	echo "   - Mute or unmute        : radio mute" | StdErr
	echo "   - Turn radio on or off  : radio on | off" | StdErr
	echo | StdErr
	exit $ERR_HELP
fi

# Display current station/stream/volume if no argument
if [ -z "$1" ]; then
	curvolume=$($PLAYER volume | grep --colour=never -m 1 -oP '\d+')
	curstream=$($PLAYER -f "%file%" current)
	if [ -z "$curstream" ]; then
		curstation="(no stream found)"
	else
		if [ -f $DBFILE ]; then
			curstation=$(cat $DBFILE | grep --colour=never -m 1 -F "$curstream" | grep --colour=never -oP '^\S+')
			if [ -z "$curstation" ]; then
				curstation="(station not found)"
			fi
		else
			curstation="(station database not found at \"$DBFILE\")"
		fi
	fi
	echo
	[ -z "$curstation" ] || echo "   Station : $curstation"
	[ -z "$curstream" ]  || echo "   Stream  : $curstream"
	[ -z "$curvolume" ]  || echo "   Volume  : $curvolume"
	echo
	exit $ERR_OK
fi

# List station IDs from station database
if [[ "$1" == "list" ]]; then
	if [ -f $DBFILE ]; then
		echo
		echo "   List of all stations:"
		cat $DBFILE | grep --color=never -oP "^\S+" | sort | sed s/^/\\t/
		echo
		exit $ERR_OK
	else
		echo | StdErr
		echo "   Station database not found at \"$DBFILE\"" | StdErr
		echo | StdErr
		exit $ERR_DBNOTFOUND
	fi
fi

# Turn radio on
if [[ "$1" == "on" || "$1" == "play" ]]; then
	# TODO: check if a radio stream is lined up
	$PLAYER play > /dev/null
	exit $ERR_OK
fi

# Turn radio off
if [[ "$1" == "off" || "$1" == "stop" ]]; then
	$PLAYER stop > /dev/null
	exit $ERR_OK
fi

# Display volume, optionally set or adjust or mute/unmute
if [[ "$1" == "vol" || "$1" == "mute" ]]; then
	declare -i curvol=$($PLAYER volume | grep --colour=never -m 1 -oP '\d+')
	declare -i newvol=$curvol
	declare -i minvol=10
	declare -i maxvol=100
	if [[ "$1" == "mute" || "$2" == "mute" ]]; then
		if (( curvol > minvol )); then
			# mute
			newvol=$minvol
		else
			# unmute
			newvol=$DEFVOL
		fi
	else
		if [ -n "$2" ]; then
			case "$2" in
				min) newvol=$minvol;;
				max) newvol=$maxvol;;
				def) newvol=$DEFVOL;;
				+)   (( newvol = curvol + ADJVOL ));;
				-)   (( newvol = curvol - ADJVOL ));;
				*)   newvol="$2";;
			esac
			if (( newvol >= maxvol )); then
				newvol=$maxvol
			elif (( newvol <= minvol )); then
				newvol=$minvol
			fi
		fi
	fi
	if (( newvol != curvol )); then
		# volume adjustment
		$PLAYER volume $newvol > /dev/null
		curvol=$newvol
	fi
	echo
	echo "   Volume: $curvol"
	echo
	exit $ERR_OK
fi

# Argument is a Station ID
# Escape argument for use with grep -P
# Is it really safe? Not sure. Couldn't make escaping ] work, for instance.
safe=$(echo "$1" | sed -e 's/\s*//g' | sed -e 's/[\[\\^$.*?"-]/\\\0/g')
[ -f $DBFILE ] && stream=$(cat $DBFILE | grep --color=never -m 1 -P "^$safe\s" | grep --color=never -oP '\S+$')

if [ -z "$stream" ]; then
	echo | StdErr
	echo "   Station \"$1\" not found." | StdErr
	echo "   List stations : radio list" | StdErr
	echo "   Usage info    : radio help" | StdErr
	echo | StdErr
	exit $ERR_IDNOTFOUND
fi

$PLAYER stop > /dev/null
$PLAYER clear > /dev/null
#$PLAYER volume $DEFVOL > /dev/null
$PLAYER add $stream > /dev/null
$PLAYER play > /dev/null
exit $ERR_OK
